external_components:
  - source: 
      type: git
      url: https://github.com/lskov/esphome_components
      ref: main
    refresh: 0s
    components: [genvexv2]

genvexv2:

select:
  - platform: genvexv2
    modbus_controller_id: genvex_modbus_controller
    name: "Genvex speed mode"
    id: genvex_speed_mode    
    address: 100
    options:
      - "Off"
      - "1"
      - "2"
      - "3"
      - "4"
      
  - platform: genvexv2
    modbus_controller_id: genvex_modbus_controller
    name: "Genvex timer"
    id: genvex_timer    
    address: 106
    options:
      - "Off"
      - "1"
      - "2"
      - "3"
      - "4"
      - "5"
      - "6"
      - "7"
      - "8"
      - "9"

sensor:
  - platform: template
    name: "Genvex Efficiency"
    icon: mdi:air-filter
    unit_of_measurement: "%"
    lambda: |-
      float genvex_temp_t1_inlet = (id(genvex_temp_t1).state);
      float genvex_temp_t3_outdoor = (id(genvex_temp_t3).state);
      float genvex_temp_t7_extract = (id(genvex_temp_t7).state);
      float x = (100 * (genvex_temp_t1_inlet - genvex_temp_t3_outdoor) / (genvex_temp_t7_extract - genvex_temp_t3_outdoor));
      return x;
    update_interval: 60s
    state_class: measurement
    
  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Genvex temp t1"
    id: genvex_temp_t1
    unit_of_measurement: °C
    accuracy_decimals: 1
    device_class: temperature
    value_type: U_WORD
    register_type: read
    address: 0
    lambda: |-
      ESP_LOGD("T1", "Processing T1 using lambda");
      return ((x - 300) / 10);
      
  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Genvex temp t3"
    id: genvex_temp_t3
    unit_of_measurement: °C
    accuracy_decimals: 1
    device_class: temperature
    value_type: U_WORD
    register_type: read
    address: 2
    lambda: |-
      ESP_LOGD("T3", "Processing T3 using lambda");
      return ((x - 300) / 10);
      
  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Genvex temp t4"
    id: genvex_temp_t4
    unit_of_measurement: °C
    accuracy_decimals: 1
    device_class: temperature
    value_type: U_WORD
    register_type: read
    address: 3
    lambda: |-
      ESP_LOGD("T4", "Processing T4 using lambda");
      return ((x - 300) / 10);
      
  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Genvex temp t7"
    id: genvex_temp_t7
    unit_of_measurement: °C
    accuracy_decimals: 1
    device_class: temperature
    value_type: U_WORD
    register_type: read
    address: 6
    lambda: |-
      ESP_LOGD("T7", "Processing T7 using lambda");
      return ((x - 300) / 10);

  # Disabled not mapped on 260 unit      
  # - platform: modbus_controller
  #   modbus_controller_id: genvex_modbus_controller
  #   name: "Genvex temp t2 panel"
  #   id: genvex_temp_t2_panel
  #   unit_of_measurement: °C
  #   accuracy_decimals: 1
  #   device_class: temperature
  #   value_type: U_WORD
  #   register_type: read
  #   address: 9
  #   lambda: |-
  #     ESP_LOGD("T2_Panel", "Processing T2 panel using lambda");
  #     return ((x - 300) / 10);

  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Genvex inlet fan"
    id: genvex_inlet_fan
    icon: mdi:fan
    unit_of_measurement: "%"
    value_type: U_WORD
    register_type: read
    address: 102

  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Genvex extract fan"
    id: genvex_extract_fan
    icon: mdi:fan
    unit_of_measurement: "%"
    value_type: U_WORD
    register_type: read
    address: 103

  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Genvex bypass"
    id: genvex_bypass
    unit_of_measurement: "%"
    value_type: U_WORD
    register_type: read
    address: 104
    
  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Genvex watervalve"
    id: genvex_watervalve
    unit_of_measurement: "%"
    value_type: U_WORD
    register_type: read
    address: 105

  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Genvex Inlet Fan"
    id: genvex_inlet_fan_rpm
    icon: mdi:fan
    unit_of_measurement: "RPM"
    value_type: U_WORD
    register_type: read
    address: 108

  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Genvex Outlet Fan"
    id: genvex_outlet_fan_rpm
    icon: mdi:fan
    unit_of_measurement: "RPM"
    value_type: U_WORD
    register_type: read
    address: 109

  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Genvex Messured Humidity"
    id: genvex_messured_humidity
    unit_of_measurement: '%'
    accuracy_decimals: 1
    device_class: humidity
    register_type: read
    address: 10
    on_value: 
      - lambda: !lambda |-
          id(aqi_humidity).publish_state( (x < 35) ? "Too Dry" : 
                                          (x < 65) ? "Perfect" : 
                                          "Too Humid");
  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Genvex Humidity Fan Control"
    id: genvex_humidity_fan_control
    icon: mdi:water-percent
    unit_of_measurement: "%"
    value_type: U_WORD
    register_type: read
    address: 106        

  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Genvex Alarm Bitfield"
    id: genvex_alarm_bitfield
    # device_class: None
    register_type: read
    address: 101
    lambda: !lambda |-
      uint16_t int_mode = (data[item->offset] << 8) + data[item->offset+1];
      ESP_LOGD("main","Parsed operation mode int : %d", int_mode);
      return int_mode;


text_sensor:
  - platform: template
    name: "Genvex Air Quality Index Humidity (AQI)"
    id: aqi_humidity
    icon: mdi:water-percent 
     

number:
  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Genvex Target Temp"
    id: genvex_target_temp
    device_class: temperature
    icon: mdi:thermometer
    unit_of_measurement: °C
    min_value: 10
    max_value: 30
    step: 0.1
    address: 0
    register_type: holding
    value_type: U_WORD
    lambda: "return ((x+100)/10);"
    write_lambda: |-
      ESP_LOGD("Genvex target temp","Processing new target temp");
      uint16_t new_temp = x * 10 - 100;
      ESP_LOGD("Genvex target temp","New value %d", new_temp);
      return new_temp;
      
  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Genvex Ventilation speed"
    id: genvex_ventilation_speed
    icon: mdi:fan
    min_value: 0
    max_value: 4
    step: 1.0
    register_type: holding
    value_type: U_WORD
    address: 100

  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Genvex Step 1 Inlet Speed"
    id: genvex_step1_inlet_speed
    icon: mdi:fan-speed-1
    min_value: 0
    max_value: 100
    unit_of_measurement: '%'
    register_type: holding
    value_type: U_WORD
    address: 6

  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Genvex Step 2 Inlet Speed"
    id: genvex_step2_inlet_speed
    icon: mdi:fan-speed-2
    min_value: 0
    max_value: 100
    unit_of_measurement: '%'
    register_type: holding
    value_type: U_WORD
    address: 7

  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Genvex Step 3 Inlet Speed"
    id: genvex_step3_inlet_speed
    icon: mdi:fan-speed-3
    min_value: 0
    max_value: 100
    unit_of_measurement: '%'
    register_type: holding
    value_type: U_WORD
    address: 8

  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Genvex Step 1 Outlet Speed"
    id: genvex_step1_outlet_speed
    icon: mdi:fan-speed-1
    min_value: 0
    max_value: 100
    unit_of_measurement: '%'
    register_type: holding
    value_type: U_WORD
    address: 9

  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Genvex Step 2 Outlet Speed"
    id: genvex_step2_outlet_speed
    icon: mdi:fan-speed-2
    min_value: 0
    max_value: 100
    unit_of_measurement: '%'
    register_type: holding
    value_type: U_WORD
    address: 10

  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Genvex Step 3 Outlet Speed"
    id: genvex_step3_outlet_speed
    icon: mdi:fan-speed-3
    min_value: 0
    max_value: 100
    unit_of_measurement: '%'
    register_type: holding
    value_type: U_WORD
    address: 11

  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Genvex Bypass Open Max Temp"
    id: genvex_bypass_open_max_temp
    icon: mdi:thermometer
    unit_of_measurement: °C
    min_value: 1
    max_value: 10
    register_type: holding
    value_type: U_WORD
    address: 17
    step: 0.1
    lambda: "return x/10;"
    write_lambda: |-
      ESP_LOGD("Genvex target temp","Processing new bypass max open temp %d", x);
      uint16_t new_temp = (x * 100)/10;
      ESP_LOGD("Genvex target temp","New value %d", new_temp);
      return new_temp;

  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Bypass Close on Low Inlet Temp (Diff From Target Temp)"
    id: bypass_close_on_low_inlet_temp
    icon: mdi:thermometer
    unit_of_measurement: °C
    min_value: 0
    max_value: 20
    register_type: holding
    value_type: U_WORD
    address: 25

binary_sensor:
  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Genvex On/Off Possible On K1"
    id: genvex_on_off_possible
    register_type: holding
    address: 24

  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Bypass On"
    id: genvex_bypass_on_off
    register_type: read
    address: 107      

  - platform: template
    name: "Water Freeze Error"
    lambda: |-
      uint16_t alarmcode = (uint16_t)(id(genvex_alarm_bitfield).state);
      bool bActive = alarmcode & 0x0010;
      return bActive;

  - platform: template
    name: "Hygrostat"
    lambda: |-
      uint16_t alarmcode = (uint16_t)(id(genvex_alarm_bitfield).state);
      bool bActive = alarmcode & 0x0040;
      return bActive;

  - platform: template
    name: "Reset Filter"
    lambda: |-
      uint16_t alarmcode = (uint16_t)(id(genvex_alarm_bitfield).state);
      bool bActive = alarmcode & 0x0080;
      return bActive;

  - platform: template
    name: "Operation"
    lambda: |-
      uint16_t alarmcode = (uint16_t)(id(genvex_alarm_bitfield).state);
      bool bActive = alarmcode & 0x1000;
      return bActive;

  - platform: template
    name: "Electric post-heating"
    lambda: |-
      uint16_t alarmcode = (uint16_t)(id(genvex_alarm_bitfield).state);
      bool bActive = alarmcode & 0x2000;
      return bActive;

  - platform: template
    name: "Extra cooling"
    lambda: |-
      uint16_t alarmcode = (uint16_t)(id(genvex_alarm_bitfield).state);
      bool bActive = alarmcode & 0x4000;
      return bActive;   

  - platform: status
    name: "Genvex Controller Status"

climate:
  - platform: genvexv2
    name: Genvex
    current_temp_sensor_id: genvex_temp_t7
    target_temp_sensor_id: genvex_target_temp
    fan_speed_sensor_id: genvex_ventilation_speed